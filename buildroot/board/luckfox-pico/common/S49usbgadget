#!/bin/sh

# init script for usb gadget with adb and rndis
#   put this on the device at: /etc/init.d/S49usbgadget


# Research
#   starting point: https://github.com/frederic/superbird-bulkcmd/blob/main/scripts/enable-adb.sh.client
#   info about configfs https://elinux.org/images/e/ef/USB_Gadget_Configfs_API_0.pdf
#   info about usbnet and bridging https://developer.ridgerun.com/wiki/index.php/How_to_use_USB_device_networking
#   more info, including for windows https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-gadget/ethernet-gadget
#   a gist that was helpful: https://gist.github.com/geekman/5bdb5abdc9ec6ac91d5646de0c0c60c4

configure_usb_gadget() {
    echo "configuring USB Gadget with acm, adb, and ncm"

    # first we create some device nodes
    mkdir -p /dev/usb-ffs
    mkdir -p /dev/usb-ffs/adb

    # mount configfs, which is an interface that allows definition of arbitrary functions and configurations to
    # define an application specific USB composite device from userspace.
    mount -t configfs none /sys/kernel/config/

    # lets instantiate a new gadget device template
    mkdir -p /sys/kernel/config/usb_gadget/g1

    # write some identifying information
    echo 0x2207 > /sys/kernel/config/usb_gadget/g1/idVendor
    echo 0x0019 > /sys/kernel/config/usb_gadget/g1/idProduct
    echo 0x0310 > /sys/kernel/config/usb_gadget/g1/bcdDevice
    echo 0x0200 > /sys/kernel/config/usb_gadget/g1/bcdUSB

    # instantiate english language strings
    mkdir -p /sys/kernel/config/usb_gadget/g1/strings/0x409

    # write some more identifying information for this device
    SERIAL=$(cat /proc/cpuinfo | grep Serial | awk '{print $3}')
    if [ -z $SERIAL ]; then
        SERIAL=0123456789ABCDEF
    fi
    echo $SERIAL > /sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber
    echo "Rockchip" > /sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer
    echo "RV1106" > /sys/kernel/config/usb_gadget/g1/strings/0x409/product

    # create function instances. here we create function for acm, adb, and ncm
    mkdir -p /sys/kernel/config/usb_gadget/g1/functions/acm.usb0
    mkdir -p /sys/kernel/config/usb_gadget/g1/functions/ffs.adb
    mkdir -p /sys/kernel/config/usb_gadget/g1/functions/ncm.usb0

    # create a configuration instance
    mkdir -p /sys/kernel/config/usb_gadget/g1/configs/b.1
    # create english language strings
    mkdir -p /sys/kernel/config/usb_gadget/g1/configs/b.1/strings/0x409
    # write a description for this device configuration
    echo "acm, adb, ncm" > /sys/kernel/config/usb_gadget/g1/configs/b.1/strings/0x409/configuration

    # configure an attribute, maxpower in this case
    echo 500 > /sys/kernel/config/usb_gadget/g1/configs/b.1/MaxPower

    # configure NCM function (Network Control Model) with MAC addresses
    echo "00:11:22:33:44:55" > /sys/kernel/config/usb_gadget/g1/functions/ncm.usb0/host_addr
    echo "00:11:22:33:44:56" > /sys/kernel/config/usb_gadget/g1/functions/ncm.usb0/dev_addr

    # link our config with the os_desc config
    ln -s /sys/kernel/config/usb_gadget/g1/configs/b.1 /sys/kernel/config/usb_gadget/g1/os_desc/b.1

    # bind our function instance to its configuration
    ln -s /sys/kernel/config/usb_gadget/g1/functions/acm.usb0 /sys/kernel/config/usb_gadget/g1/configs/b.1
    ln -s /sys/kernel/config/usb_gadget/g1/functions/ffs.adb /sys/kernel/config/usb_gadget/g1/configs/b.1
    ln -s /sys/kernel/config/usb_gadget/g1/functions/ncm.usb0 /sys/kernel/config/usb_gadget/g1/configs/b.1

    # mount the adb function filesystem
    mount -t functionfs adb /dev/usb-ffs/adb

    # kick off the adb daemon in the background, and give it time to initialize
    echo "starting adb daemon"
    start-stop-daemon --start --quiet --background --exec /usr/bin/adbd
    sleep 1s

    # attach the created gadget deviec to our UDC driver
    # echo ffb00000.usb > /sys/kernel/config/usb_gadget/g1/UDC
    UDC_DEVICE=$(ls -1 /sys/class/udc/)
    echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC

    echo "bringing up usb0"
    # bring up the usb0 interface
    ifconfig usb0 172.32.0.93 netmask 255.255.0.0 broadcast 172.32.255.255
    ifconfig usb0 up
}

case $1 in
start)
    ifconfig lo up
    configure_usb_gadget
    ;;
*)
    exit 1
    ;;
esac
